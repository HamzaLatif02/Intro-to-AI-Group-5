import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import math
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
from imblearn.over_sampling import SMOTE
from collections import Counter
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense


# Function to build and evaluate Decision Tree model
def decision_tree_model(max_depth):
    # Instantiate a Decision Tree Classifier with specified max_depth
    dt = DecisionTreeClassifier(max_depth=max_depth, random_state=42)
    
    # Train the Decision Tree model on the training data
    dt.fit(X_train, y_train)

    # Predict using the trained model on the test data
    y_pred = dt.predict(X_test)

    # Calculate accuracy and generate a classification report
    accuracy = accuracy_score(y_test, y_pred)
    class_report = classification_report(y_test, y_pred)

    # Display information about the model and its performance
    print(f'Max Depth of Tree: {max_depth}')
    print(f'Decision Tree Accuracy: {accuracy}')
    print(f'Classification Report:\n{class_report}')
    print()

# Function to perform k-fold cross-validation on a given model
def k_fold_cross_validation(model, X, y, k):
    # Create k-fold cross-validation iterator
    cv = KFold(n_splits=k, shuffle=True, random_state=42)
    
    # Perform k-fold cross-validation on the model and data
    scores = cross_val_score(model, X, y, cv=cv, scoring='accuracy')

    # Display results of k-fold cross-validation
    print(f'K-Fold Cross-Validation with {k} folds:')
    print(f'Accuracy Scores: {scores}')
    print(f'Mean Accuracy: {scores.mean()}')
    print()

# Run the Decision Tree model with different max_depth values
decision_tree_model(3)  # Evaluate the Decision Tree with max_depth = 3
decision_tree_model(5)  # Evaluate the Decision Tree with max_depth = 5
decision_tree_model(10)  # Evaluate the Decision Tree with max_depth = 10

# Example using k-fold cross-validation with Decision Tree
dt = DecisionTreeClassifier(max_depth=5, random_state=42)  # Instantiate Decision Tree with max_depth = 5
k_fold_cross_validation(dt, X, y, k=5)  # Perform k-fold cross-validation (k=5) using the Decision Tree model
